source("D:/Desktop/R_codes/1.R", echo=TRUE)
source("D:/Desktop/R_codes/1.R", echo=TRUE)
source("D:/Desktop/R_codes/1.R", echo=TRUE)
install.packages("rmarkdown")
source("D:/Desktop/R_codes/1.R", echo=TRUE)
source("D:/Desktop/R_codes/1.R", echo=TRUE)
install.packages("rmarkdown")
source("D:/Desktop/R_codes/1.R", echo=TRUE)
source("D:/Desktop/R_codes/1.R", echo=TRUE)
source("D:/Desktop/R_codes/1.R", echo=TRUE)
rmarkdown::install_pandoc()
rmarkdown::pandoc_download()
{
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("readr")
install.packages("stringr")
install.packages("lubridate")
install.packages("magrittr")
install.packages("purrr")
install.packages("caret")
install.packages("data.table")
install.packages("reshape2")
install.packages("plyr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("shiny")
}
}
# 数据库包
install.packages(c("RMySQL", "RSQLite", "RODBC", "odbc", "DBI", "dbplyr"))
# 高性能计算包
install.packages(c("doParallel", "foreach", "snow", "parallel"))
setwd("D:/Desktop/大三3/STAT413/Assignments/Lec 5_practice")
Auto = read.table("auto.txt", header=T)
lm1 <- lm(acceleration ~ weight, data = Auto)
lm2 <- lm(acceleration ~ weight + horsepower, data = Auto)
# 比较 lm1 和 lm2 中 weight 的系数
coef_lm1 <- coef(lm1)["weight"]
coef_lm2 <- coef(lm2)["weight"]
# 输出比较结果
if (coef_lm1 > coef_lm2) {
message("在 lm1 中，weight 的系数较大，说明重的汽车加速时间较长")
} else if (coef_lm1 < coef_lm2) {
message("在 lm2 中，weight 的系数较大，说明重的汽车加速时间较长")
} else {
message("lm1 和 lm2 中 weight 的系数相等")
}
coef_lm1
coef_lm2
library(ggplot2)
ggplot(Auto, aes(x=weight, y=acceleration)) + geom_point()
source("~/.active-rstudio-document", echo=TRUE)
library(ggplot2)
ggplot(Auto, aes(x=weight, y=acceleration)) + geom_point()
ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
geom_point() + scale_color_gradientn(colours = rainbow(5))
ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
geom_point() + scale_color_gradientn(colours = rainbow(5))
Auto$hp = cut(Auto$horsepower,
breaks=c(45,70, 80, 90,100,110, 130, 150,230),
labels=c("hp<=70", "70 < hp <= 80", "80 < hp <= 90",
"90 < hp <= 100", "100 < hp <= 110",
"110 < hp <= 130",
"130 < hp <= 150", "hp > 150"))
1ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
geom_point() + scale_color_gradientn(colours = rainbow(5)) +
facet_wrap(~hp, nrow=2) + theme(legend.position="top")
# Step 1
model1 <- lm(acceleration ~ horsepower, data = Auto)
RY <- residuals(model1)
# Step 2
model2 <- lm(weight ~ horsepower, data = Auto)
RWT <- residuals(model2)
# Step 3
model3 <- lm(RY ~ RWT)
# Step 1
model1 <- lm(acceleration ~ horsepower, data = Auto)
summary(model1)  # 显示模型系数和统计信息
RY <- residuals(model1)
RWT <- residuals(model2)
# Step 2
model2 <- lm(weight ~ horsepower, data = Auto)
summary(model2)  # Display model coefficients and statistics
RWT <- residuals(model2)
# Step 3
model3 <- lm(RY ~ RWT)
summary(model3)  # Display model coefficients and statistics
knitr::opts_chunk$set(echo = TRUE)
Auto = read.table("auto.txt", header=T)
lm1 <- lm(acceleration ~ weight, data = Auto)
lm2 <- lm(acceleration ~ weight + horsepower, data = Auto)
coef_lm1 <- coef(lm1)["weight"]
coef_lm2 <- coef(lm2)["weight"]
coef_lm1
coef_lm2
library(ggplot2)
ggplot(Auto, aes(x=weight, y=acceleration)) + geom_point()
ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
geom_point() + scale_color_gradientn(colours = rainbow(5))
Auto$hp = cut(Auto$horsepower,
breaks=c(45,70, 80, 90,100,110, 130, 150,230),
labels=c("hp<=70", "70 < hp <= 80", "80 < hp <= 90",
"90 < hp <= 100", "100 < hp <= 110",
"110 < hp <= 130",
"130 < hp <= 150", "hp > 150"))
ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
geom_point() + scale_color_gradientn(colours = rainbow(5)) +
facet_wrap(~hp, nrow=2) + theme(legend.position="top")
# Step 1
model1 <- lm(acceleration ~ horsepower, data = Auto)
summary(model1)  # Display model coefficients and statistics
RY <- residuals(model1)
# Step 2
model2 <- lm(weight ~ horsepower, data = Auto)
summary(model2)  # Display model coefficients and statistics
RWT <- residuals(model2)
# Step 3
model3 <- lm(RY ~ RWT)
summary(model3)  # Display model coefficients and statistics
knitr::opts_chunk$set(echo = TRUE)
Auto = read.table("auto.txt", header=T)
lm1 <- lm(acceleration ~ weight, data = Auto)
lm2 <- lm(acceleration ~ weight + horsepower, data = Auto)
coef_lm1 <- coef(lm1)["weight"]
coef_lm2 <- coef(lm2)["weight"]
coef_lm1
coef_lm2
library(ggplot2)
ggplot(Auto, aes(x=weight, y=acceleration)) + geom_point()
ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
geom_point() + scale_color_gradientn(colours = rainbow(5))
Auto$hp = cut(Auto$horsepower,
breaks=c(45,70, 80, 90,100,110, 130, 150,230),
labels=c("hp<=70", "70 < hp <= 80", "80 < hp <= 90",
"90 < hp <= 100", "100 < hp <= 110",
"110 < hp <= 130",
"130 < hp <= 150", "hp > 150"))
ggplot(Auto, aes(x=weight, y=acceleration, col=horsepower)) +
geom_point() + scale_color_gradientn(colours = rainbow(5)) +
facet_wrap(~hp, nrow=2) + theme(legend.position="top")
# Step 1
model1 <- lm(acceleration ~ horsepower, data = Auto)
summary(model1)  # Display model coefficients and statistics
RY <- residuals(model1)
# Step 2
model2 <- lm(weight ~ horsepower, data = Auto)
summary(model2)  # Display model coefficients and statistics
RWT <- residuals(model2)
# Step 3
model3 <- lm(RY ~ RWT)
summary(model3)  # Display model coefficients and statistics
# Step 2
model2 <- lm(weight ~ horsepower, data = Auto)
summary(model2)  # Display model coefficients and statistics
RWT <- residuals(model2)
# Step 3
model3 <- lm(RY ~ RWT)
summary(model3)  # Display model coefficients and statistics
